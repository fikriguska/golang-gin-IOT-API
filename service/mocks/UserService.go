// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "src/model"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Activate provides a mock function with given fields: _a0
func (_m *UserService) Activate(_a0 model.User) {
	_m.Called(_a0)
}

// Add provides a mock function with given fields: _a0
func (_m *UserService) Add(_a0 model.User) {
	_m.Called(_a0)
}

// Auth provides a mock function with given fields: _a0
func (_m *UserService) Auth(_a0 model.User) (bool, bool) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(model.User) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IsExist provides a mock function with given fields: _a0
func (_m *UserService) IsExist(_a0 model.User) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsTokenValid provides a mock function with given fields: _a0
func (_m *UserService) IsTokenValid(_a0 model.User) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
